import streamlit as st
import streamlit.components.v1 as components
import pandas as pd
import time
import json
import base64
import requests
from datetime import datetime, date, timedelta
from github import Github
import holidays

st.markdown("""
    <style>
        .block-container {
            padding-left: 0 !important;
            padding-right: 0 !important;
            max-width: 100% !important;
        }
        iframe {
            width: 100% !important;
        }
    </style>
""", unsafe_allow_html=True)

# --- CONFIGS ---
GITHUB_USER = st.secrets["github"]["user"]
GITHUB_REPO = st.secrets["github"]["repo"]
GITHUB_TOKEN = st.secrets["github"]["token"]
BRANCH = st.secrets["github"]["branch"]
feriados_br = holidays.Brazil()

PROJETOS = [
    'AB Mauri',
    'Adcos',
    'Coop',
    'Davo',
    'Nissei',
    'Pague menos',
    'Tenda',
    'Unilever',
    'Zona sul'    
]

# --- LOG ---
if "log" not in st.session_state:
    st.session_state.log = []

def registrar_log(msg):
    hora = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    st.session_state.log.append(f"[{hora}] {msg}")

# --- FUN√á√ïES ---
def eh_dia_util(d): return d.weekday() < 5 and d not in feriados_br
def proximo_dia_util(d): return d + timedelta(days=1) if not eh_dia_util(d) else d
def retroceder_dias_uteis(d, dias):
    while dias > 0:
        d -= timedelta(days=1)
        if eh_dia_util(d): dias -= 1
    return d

def github_file_url(projeto, ano, mes):
    return f"data/{projeto}/tarefas_{ano}_{mes}.json"

def listar_arquivos_json_por_projeto(projeto):
    pasta = f"data/{projeto}"
    url = f"https://api.github.com/repos/{GITHUB_USER}/{GITHUB_REPO}/contents/{pasta}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        return [f["name"] for f in r.json() if f["name"].endswith(".json")]
    return []

def carregar_json_github(projeto, ano, mes):
    path = github_file_url(projeto, ano, mes)
    url = f"https://api.github.com/repos/{GITHUB_USER}/{GITHUB_REPO}/contents/{path}"
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}
    r = requests.get(url, headers=headers)
    if r.status_code == 200:
        content = base64.b64decode(r.json()["content"])
        return json.loads(content), r.json()["sha"]
    return [], None

def salvar_arquivo_github(projeto, ano, mes, data):
    try:
        g = Github(GITHUB_TOKEN)
        repo = g.get_user().get_repo(GITHUB_REPO)
        path = github_file_url(projeto, ano, mes)
        conteudo = json.dumps(data, ensure_ascii=False, indent=4)

        try:
            arquivo = repo.get_contents(path, ref=BRANCH)
            repo.update_file(
                path=path,
                message=f"Atualizando tarefas {ano}/{mes} ({projeto})",
                content=conteudo,
                sha=arquivo.sha,
                branch=BRANCH
            )
            registrar_log(f"‚úÖ Arquivo atualizado: {path}")
        except Exception as e:
            if "404" in str(e):
                repo.create_file(
                    path=path,
                    message=f"Criando novo arquivo tarefas_{ano}_{mes}.json",
                    content=conteudo,
                    branch=BRANCH
                )
                registrar_log(f"üìÑ Novo arquivo criado: {path}")
            else:
                raise e

        return True

    except Exception as e:
        erro_msg = f"‚ùå Erro ao salvar no GitHub: {e}"
        st.error(f"Erro: {e}")
        registrar_log(erro_msg)
        return False

def encontrar_data_disponivel(data_base, subtipo, dados):
    while True:
        if eh_dia_util(data_base):
            ocupadas = sum(1 for d in dados if d["Data Entrega"] == str(data_base) and d["Tipo Subtarefa"] == subtipo)
            if ocupadas < 5:
                return data_base
        data_base -= timedelta(days=1)

def gerar_proximo_id():
    ids = []
    for projeto in PROJETOS:
        arquivos = listar_arquivos_json_por_projeto(projeto)
        for arq in arquivos:
            try:
                ano, mes = arq.replace("tarefas_", "").replace(".json", "").split("_")
                dados, _ = carregar_json_github(projeto, ano, mes)
                ids += [int(d["ID Tarefa"]) for d in dados if d["ID Tarefa"].isdigit()]
            except:
                continue
    return max(ids) + 1 if ids else 1
    
    col_main = st.columns([1, 4, 1])
    with col_main[1]:
        # --- IN√çCIO DAS ABAS ---
        abas = st.tabs(["üìã Cadastro", "üìã Tarefas Cadastradas", "üìå Kanban", "üìú LOG"])


    # --- ABA CADASTRO ---
    with abas[0]:
        with col_main[1]:
            st.header("üìã Cadastro de Tarefa")
            novo_id = gerar_proximo_id()
        
            with st.form("form_cadastro"):
                projeto = st.selectbox("Projeto", PROJETOS, index=0)
                titulo = st.text_input("T√≠tulo da Tarefa")
                chamado = st.text_input("Chamado (CRIA-123)")
        
                with st.expander("üìå Subtarefas", expanded=True):
                    t = st.checkbox("üìù Texto", value=True)
                    l = st.checkbox("üé® Layout", value=True)
                    h = st.checkbox("üíª HTML", value=True)
        
                hoje = date.today()
                data_entrega = st.date_input("Data Final", value=proximo_dia_util(hoje), min_value=hoje)
        
                cadastrar = st.form_submit_button("üíæ Cadastrar")
            
            if cadastrar:
                with st.spinner("Salvando tarefa..."):
                    erros = []
            
                    if not titulo.strip():
                        erros.append("‚ùå O campo t√≠tulo √© obrigat√≥rio.")
            
                    if not (t or l or h):
                        erros.append("‚ö†Ô∏è Marque pelo menos uma subtarefa.")
            
                    tipos = []
                    if t: tipos.append("Texto")
                    if l: tipos.append("Layout")
                    if h: tipos.append("HTML")
            
                    tipos.sort(key=lambda x: ["Texto", "Layout", "HTML"].index(x))
                    ano, mes = data_entrega.year, f"{data_entrega.month:02}"
                    dados, _ = carregar_json_github(projeto, ano, mes)
            
                    novas = []
                    dias = len(tipos) - 1
                    data_hoje = date.today()
                    mes_final = data_entrega.month
            
                    for i, tipo in enumerate(tipos):
                        base = retroceder_dias_uteis(data_entrega, dias - i) if dias > 0 else data_entrega
                        data_final = encontrar_data_disponivel(base, tipo, dados)
            
                        if data_final < data_hoje:
                            erros.append(f"‚ùå A subtarefa '{tipo}' esta para uma data inv√°lida: {data_final.strftime('%d/%m/%Y')}.\nAjuste a data final da tarefa.")
            
                        if data_final.month < mes_final:
                            erros.append(f"‚ùå A subtarefa '{tipo}' n√£o pode ser cadastrada em um m√™s diferente do selecionado na data final. ({data_final.strftime('%d/%m/%Y')}). \nAjuste a data final da tarefa.")
            
                        novas.append({
                            "ID Tarefa": str(novo_id),
                            "T√≠tulo Tarefa": titulo,
                            "Subtarefa": str(["Texto", "Layout", "HTML"].index(tipo)+1),
                            "T√≠tulo Subtarefa": f"{tipo}_{titulo}",
                            "Tipo Subtarefa": tipo,
                            "Chamado": chamado,
                            "Data Cadastro": datetime.today().strftime("%Y-%m-%d"),
                            "Data Entrega": str(data_final),
                            "Projeto": projeto
                        })
            
                    if erros:
                        for erro in erros:
                            st.error(erro)
                        registrar_log(f"‚ùå Erro(s) no cadastro da tarefa {novo_id}: {' | '.join(erros)}")
                    else:
                        dados.extend(novas)
                        if salvar_arquivo_github(projeto, ano, mes, dados):
                            st.success("‚úÖ Tarefa cadastrada com sucesso!")
                            registrar_log(f"‚úÖ Cadastro tarefa {novo_id} em {projeto}/tarefas_{ano}_{mes}.json")

    # --- ABA TAREFAS CADASTRADAS ---
    with abas[1]:
        with col_main[1]:
            st.header("üìã Tarefas Cadastradas")
            projeto_selecionado = st.selectbox("Projeto", PROJETOS, key="projeto_selecionado")
        
            arquivos = listar_arquivos_json_por_projeto(projeto_selecionado)
            periodos = sorted([a.replace("tarefas_", "").replace(".json", "") for a in arquivos])
        
            if not periodos:
                st.warning("‚ö†Ô∏è Nenhum arquivo encontrado para este projeto.")
            else:
                if "ultimo_periodo" not in st.session_state:
                    st.session_state.ultimo_periodo = None
        
                periodo = st.selectbox(
                    "Selecione o Ano/M√™s", periodos,
                    format_func=lambda x: f"{x[:4]}/{x[5:]}",
                    key="periodo_selecionado"
                )
        
                if st.session_state.ultimo_periodo is not None and st.session_state.ultimo_periodo != st.session_state.periodo_selecionado:
                    st.session_state.ultimo_periodo = st.session_state.periodo_selecionado
                    st.session_state["modo_edicao"] = False
                    st.session_state["id_em_edicao"] = None
                    st.rerun()
                else:
                    st.session_state.ultimo_periodo = st.session_state.periodo_selecionado
        
                ano, mes = st.session_state.periodo_selecionado.split("_")
                dados_json, _ = carregar_json_github(projeto_selecionado, ano, mes)
        
                if "modo_edicao" not in st.session_state:
                    st.session_state["modo_edicao"] = False
                if "id_em_edicao" not in st.session_state:
                    st.session_state["id_em_edicao"] = None
        
        
                if st.session_state.get("tarefa_atualizada"):
                    st.success(f"‚úÖ {st.session_state['tarefa_atualizada']}")
                    del st.session_state["tarefa_atualizada"]
        
                id_input = st.text_input("‚úèÔ∏è Digite o ID da Tarefa para editar", value="")
        
                if not st.session_state.modo_edicao:
                    if id_input:
                        tarefas = [t for t in dados_json if t["ID Tarefa"] == id_input]
                        if not tarefas:
                            st.warning(f"‚ùå Nenhuma tarefa encontrada com ID {id_input}.")
                            registrar_log(f"‚ö†Ô∏è ID {id_input} n√£o localizado em {projeto_selecionado}/tarefas_{ano}_{mes}.json")
                        else:
                            st.session_state.modo_edicao = True
                            st.session_state.id_em_edicao = id_input
                            st.rerun()
                    else:
                        if dados_json:
                            st.markdown("### üìÑ Tarefas no Per√≠odo Selecionado")
                            st.dataframe(pd.DataFrame(dados_json), use_container_width=True)
                        else:
                            st.info("‚ÑπÔ∏è Nenhuma tarefa cadastrada neste per√≠odo.")
        
                else:
                    tarefas = [t for t in dados_json if t["ID Tarefa"] == st.session_state.id_em_edicao]
                    if not tarefas:
                        st.session_state["modo_edicao"] = False
                        st.session_state["id_em_edicao"] = None
                        st.rerun()
        
                    ref = tarefas[0]
                    titulo_antigo = ref["T√≠tulo Tarefa"]
                    chamado_antigo = ref.get("Chamado", "")
                    tipos_atuais = {t["Tipo Subtarefa"] for t in tarefas}
                    datas_atuais = [datetime.strptime(t["Data Entrega"], "%Y-%m-%d").date() for t in tarefas]
        
                    st.markdown("### üõ†Ô∏è Editar Tarefa")
                    novo_titulo = st.text_input("Novo T√≠tulo", value=titulo_antigo)
                    novo_chamado = st.text_area("Novo Chamado (CRIA-123)", value=chamado_antigo, height=80)
        
                    st.markdown("**Subtarefas e Status:**")
                    tipos = ["Texto", "Layout", "HTML"]
                    checkboxes_tipos = {}
                    checkboxes_status = {}
        
                    for tipo in tipos:
                        col_sub, col_stat = st.columns([1, 1])
                        with col_sub:
                            existe = tipo in tipos_atuais
                            checkboxes_tipos[tipo] = st.checkbox(f"‚úÖ {tipo}", value=existe, key=f"tipo_{tipo}")
                        with col_stat:
                            if existe:
                                concluido = any(t["Tipo Subtarefa"] == tipo and t.get("Status") == "Conclu√≠do" for t in tarefas)
                                checkboxes_status[tipo] = st.checkbox(f"‚úîÔ∏è Conclu√≠do", value=concluido, key=f"stat_{tipo}")
        
                    nova_data = st.date_input("Nova Data de Entrega", value=max(datas_atuais))
        
                    if st.button("üíæ Atualizar Tarefa"):
                        try:
                            tipos_selecionados = [k for k, v in checkboxes_tipos.items() if v]
                            if not tipos_selecionados:
                                st.error("‚ùå Nenhuma subtarefa foi selecionada.")
                                registrar_log(f"‚ùå Cancelado: nenhuma subtarefa marcada para ID {st.session_state.id_em_edicao}")
                            else:
                                registrar_log(f"üîÑ Atualizando tarefa {st.session_state.id_em_edicao} em {projeto_selecionado}/tarefas_{ano}_{mes}.json")
        
                                dados_filtrados = [d for d in dados_json if d["ID Tarefa"] != st.session_state.id_em_edicao]
        
                                novas_subs = []
                                dias_ajuste = len(tipos_selecionados) - 1
                                for i, tipo in enumerate(sorted(tipos_selecionados, key=lambda x: ["Texto", "Layout", "HTML"].index(x))):
                                    base = retroceder_dias_uteis(nova_data, dias_ajuste - i) if dias_ajuste else nova_data
                                    entrega = encontrar_data_disponivel(base, tipo, dados_filtrados)
                                    status = "Conclu√≠do" if checkboxes_status.get(tipo) else "Pendente"
                                    novas_subs.append({
                                        "ID Tarefa": st.session_state.id_em_edicao,
                                        "T√≠tulo Tarefa": novo_titulo,
                                        "Subtarefa": str(["Texto", "Layout", "HTML"].index(tipo)+1),
                                        "T√≠tulo Subtarefa": f"{tipo}_{novo_titulo}",
                                        "Tipo Subtarefa": tipo,
                                        "Chamado": novo_chamado,
                                        "Data Cadastro": datetime.today().strftime("%Y-%m-%d"),
                                        "Data Entrega": str(entrega),
                                        "Status": status,
                                        "Projeto": projeto_selecionado
                                    })
        
                                dados_filtrados.extend(novas_subs)
        
                                g = Github(GITHUB_TOKEN)
                                repo = g.get_user().get_repo(GITHUB_REPO)
                                caminho = github_file_url(projeto_selecionado, ano, mes)
                                arquivo = repo.get_contents(caminho, ref=BRANCH)
                                repo.update_file(
                                    path=caminho,
                                    message=f"Atualiza√ß√£o da tarefa {st.session_state.id_em_edicao}",
                                    content=json.dumps(dados_filtrados, ensure_ascii=False, indent=4),
                                    sha=arquivo.sha,
                                    branch=BRANCH
                                )
        
                                registrar_log(f"‚úÖ Tarefa {st.session_state.id_em_edicao} atualizada.")
                                st.session_state["tarefa_atualizada"] = f"Tarefa {st.session_state.id_em_edicao} atualizada com sucesso!"
                                st.session_state["modo_edicao"] = False
                                st.session_state["id_em_edicao"] = None
        
                                st.success(f"‚úÖ {st.session_state['tarefa_atualizada']}")
                                del st.session_state["tarefa_atualizada"]
        
                                st.markdown("### üìÑ Tarefas no Per√≠odo Selecionado")
                                st.dataframe(pd.DataFrame(dados_filtrados), use_container_width=True)
        
                        except Exception as e:
                            st.error(f"‚ùå Erro: {e}")
                            registrar_log(f"‚ùå Erro na atualiza√ß√£o da tarefa {st.session_state.get('id_em_edicao')}: {e}")

# --- ABA KANBAN ---
with abas[2]:
    with col_main[1]:
        st.markdown("## üìå Visualiza√ß√£o Kanban")

    try:
        url = f"https://api.github.com/repos/{GITHUB_USER}/{GITHUB_REPO}/contents/kanban.html"
        headers = {"Authorization": f"token {GITHUB_TOKEN}"}
        r = requests.get(url, headers=headers)

        if r.status_code == 200:
            content = base64.b64decode(r.json()["content"]).decode("utf-8")
            components.html(content, height=1000, scrolling=True)
        else:
            st.error("‚ùå N√£o foi poss√≠vel carregar o arquivo kanban.html.")

    except Exception as e:
        st.error(f"Erro ao exibir o Kanban: {e}")

# --- ABA LOG ---
with abas[3]:
    with col_main[1]:
        st.header("üìú LOG do Sistema")
    
        if not st.session_state.log:
            st.info("‚ÑπÔ∏è Nenhuma a√ß√£o registrada nesta sess√£o.")
        else:
            for linha in reversed(st.session_state.log):
                st.code(linha)
